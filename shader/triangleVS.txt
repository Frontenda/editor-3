//uniform vec3 LightPosition;

const float SpecularContribution = 0.3;
const float DiffuseContribution  = 1.0 - SpecularContribution;

attribute float index;
uniform int[12] edgeVertex;
uniform int[16 * 4] edgeSelection;
uniform vec4[4] verticesPositions;
uniform float[4] isoValues;
uniform float isoLevel; 

void main(void){
	// vertex MVP transform
	int i = 0;
	if(isoValues[3] >= isoLevel) i |= 1;
	if(isoValues[2] >= isoLevel) i |= 2;
	if(isoValues[1] >= isoLevel) i |= 4;
	if(isoValues[0] >= isoLevel) i |= 8;

	int a = edgeVertex[edgeSelection[i * 4 + index]];
	int b = edgeVertex[(edgeSelection[i * 4 + index] + 1)];
//int a = edgeVertexB[0];
	vec4 vecA = vec4(1, 1, 1, 1);
	if(a == 0) vecA = verticesPositions[0]; 
	if(a == 1) vecA = verticesPositions[1]; 
	if(a == 2) vecA = verticesPositions[2]; 
	if(a == 3) vecA = verticesPositions[3]; 

	vec4 vecB;
	if(b == 0) vecB = verticesPositions[0];
	if(b == 1) vecB = verticesPositions[1];
	if(b == 2) vecB = verticesPositions[2];
	if(b == 3) vecB = verticesPositions[3];

	float alfa = (isoLevel - isoValues[b]) / (isoValues[a] - isoValues[b]);	
	vec4 result = mix(vecA, vecB, alfa);
	gl_Position = gl_ModelViewProjectionMatrix * result;




/*	if(i == 10) {
		gl_FrontColor = vec4(1, 1, 1, 1);
		} else {
		gl_FrontColor = vec4(1, 0, 0, 1);
		}*/
	if(index == 0) {
//		gl_Position = gl_ModelViewProjectionMatrix * verticesPositions[0];
		gl_FrontColor = vec4(1, 0, 0, 1);
	
	} else if(index == 1) {
//		gl_Position = gl_ModelViewProjectionMatrix * verticesPositions[1];
		gl_FrontColor = vec4(0, 1, 0, 1);
	
	} else if(index == 2){
//		gl_Position = gl_ModelViewProjectionMatrix * verticesPositions[2];
		gl_FrontColor = vec4(0, 0, 1, 1);
	} else if(index == 3){
//		gl_Position = gl_ModelViewProjectionMatrix * verticesPositions[3];
		gl_FrontColor = vec4(0, 1, 1, 1);
	} else {
		gl_Position = gl_ModelViewProjectionMatrix * vec4(10, 10, 0, 1);
		gl_FrontColor = vec4(1, 1, 1, 1);
	}
//	gl_Position = gl_ModelViewProjectionMatrix * gl_Vertex;
	// eye-space normal
	//N = gl_NormalMatrix * gl_Normal;
	// eye-space light vector
	//vec4 V = gl_ModelViewMatrix * gl_Vertex;
	//L = LightPosition - V.xyz;
	// Copy the primary color
	//gl_FrontColor = vec4(1, 1, 1, 1);
}
